****************
243 ['Easy', 'Shortest Word Distance']
Initiating... atom ./test/104_maximum-depth-of-binary-tree.txt
Connected...
./test/104_maximum-depth-of-binary-tree.txt https://leetcode.com/problems/maximum-depth-of-binary-tree
--------
aceCtrl.init(
        [{'value': 'cpp', 'text': 'C++', 'defaultCode': '/**\u000D\u000A * Definition for a binary tree node.\u000D\u000A * struct TreeNode {\u000D\u000A *     int val\u003B\u000D\u000A *     TreeNode *left\u003B\u000D\u000A *     TreeNode *right\u003B\u000D\u000A *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\u000D\u000A * }\u003B\u000D\u000A */\u000D\u000Aclass Solution {\u000D\u000Apublic:\u000D\u000A    int maxDepth(TreeNode* root) {\u000D\u000A        \u000D\u000A    }\u000D\u000A}\u003B' },{'value': 'java', 'text': 'Java', 'defaultCode': '/**\u000D\u000A * Definition for a binary tree node.\u000D\u000A * public class TreeNode {\u000D\u000A *     int val\u003B\u000D\u000A *     TreeNode left\u003B\u000D\u000A *     TreeNode right\u003B\u000D\u000A *     TreeNode(int x) { val \u003D x\u003B }\u000D\u000A * }\u000D\u000A */\u000D\u000Apublic class Solution {\u000D\u000A    public int maxDepth(TreeNode root) {\u000D\u000A        \u000D\u000A    }\u000D\u000A}' },{'value': 'python', 'text': 'Python', 'defaultCode': '# Definition for a binary tree node.\u000D\u000A# class TreeNode(object):\u000D\u000A#     def __init__(self, x):\u000D\u000A#         self.val \u003D x\u000D\u000A#         self.left \u003D None\u000D\u000A#         self.right \u003D None\u000D\u000A\u000D\u000Aclass Solution(object):\u000D\u000A    def maxDepth(self, root):\u000D\u000A        \u0022\u0022\u0022\u000D\u000A        :type root: TreeNode\u000D\u000A        :rtype: int\u000D\u000A        \u0022\u0022\u0022\u000D\u000A        ' },{'value': 'c', 'text': 'C', 'defaultCode': '/**\u000D\u000A * Definition for a binary tree node.\u000D\u000A * struct TreeNode {\u000D\u000A *     int val\u003B\u000D\u000A *     struct TreeNode *left\u003B\u000D\u000A *     struct TreeNode *right\u003B\u000D\u000A * }\u003B\u000D\u000A */\u000D\u000Aint maxDepth(struct TreeNode* root) {\u000D\u000A    \u000D\u000A}' },{'value': 'csharp', 'text': 'C#', 'defaultCode': '/**\u000D\u000A * Definition for a binary tree node.\u000D\u000A * public class TreeNode {\u000D\u000A *     public int val\u003B\u000D\u000A *     public TreeNode left\u003B\u000D\u000A *     public TreeNode right\u003B\u000D\u000A *     public TreeNode(int x) { val \u003D x\u003B }\u000D\u000A * }\u000D\u000A */\u000D\u000Apublic class Solution {\u000D\u000A    public int MaxDepth(TreeNode root) {\u000D\u000A        \u000D\u000A    }\u000D\u000A}' },{'value': 'javascript', 'text': 'JavaScript', 'defaultCode': '/**\u000D\u000A * Definition for a binary tree node.\u000D\u000A * function TreeNode(val) {\u000D\u000A *     this.val \u003D val\u003B\u000D\u000A *     this.left \u003D this.right \u003D null\u003B\u000D\u000A * }\u000D\u000A */\u000D\u000A/**\u000D\u000A * @param {TreeNode} root\u000D\u000A * @return {number}\u000D\u000A */\u000D\u000Avar maxDepth \u003D function(root) {\u000D\u000A    \u000D\u000A}\u003B' },{'value': 'ruby', 'text': 'Ruby', 'defaultCode': '# Definition for a binary tree node.\u000D\u000A# class TreeNode\u000D\u000A#     attr_accessor :val, :left, :right\u000D\u000A#     def initialize(val)\u000D\u000A#         @val \u003D val\u000D\u000A#         @left, @right \u003D nil, nil\u000D\u000A#     end\u000D\u000A# end\u000D\u000A\u000D\u000A# @param {TreeNode} root\u000D\u000A# @return {Integer}\u000D\u000Adef max_depth(root)\u000D\u000A    \u000D\u000Aend' },{'value': 'swift', 'text': 'Swift', 'defaultCode': '/**\u000A * Definition for a binary tree node.\u000A * public class TreeNode {\u000A *     public var val: Int\u000A *     public var left: TreeNode?\u000A *     public var right: TreeNode?\u000A *     public init(_ val: Int) {\u000A *         self.val \u003D val\u000A *         self.left \u003D nil\u000A *         self.right \u003D nil\u000A *     }\u000A * }\u000A */\u000Aclass Solution {\u000A    func maxDepth(_ root: TreeNode?) \u002D\u003E Int {\u000A        \u000A    }\u000A}' },{'value': 'golang', 'text': 'Go', 'defaultCode': '/**\u000A * Definition for a binary tree node.\u000A * type TreeNode struct {\u000A *     Val int\u000A *     Left *TreeNode\u000A *     Right *TreeNode\u000A * }\u000A */\u000Afunc maxDepth(root *TreeNode) int {\u000A    \u000A}' },],
        '104_0',
        104,
        '/problems/maximum-depth-of-binary-tree/interpret_solution/',
        '/problems/maximum-depth-of-binary-tree/submit/',
        '/submissions/detail/0/',
        '/problems/0/',
        'Maximum Depth of Binary Tree',
        '[]',
        '{\u000D\u000A  \u0022name\u0022: \u0022maxDepth\u0022,\u000D\u000A  \u0022params\u0022: [\u000D\u000A    {\u000D\u000A      \u0022name\u0022: \u0022root\u0022,\u000D\u000A      \u0022type\u0022: \u0022TreeNode\u0022\u000D\u000A    }\u000D\u000A  ],\u000D\u000A  \u0022return\u0022: {\u000D\u000A    \u0022type\u0022: \u0022integer\u0022\u000D\u000A  }\u000D\u000A}',
        true,
        [],
        ''
        );
